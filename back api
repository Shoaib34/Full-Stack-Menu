const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');

const app = express();
const port = process.env.PORT || 3000;

mongoose.connect('mongodb://127.0.0.1:27017/food', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => {
  console.log('MongoDB connected successfully');
})
.catch((error) => {
  console.error('MongoDB connection error:', error);
});

const orderSchema = new mongoose.Schema({
  items: [
    {
      item: String,
      description: String,
      price: Number,
      quantity: Number,
    }
  ],
  totalPrice: Number,
});

const Order = mongoose.model('Order', orderSchema);

const menuSchema = new mongoose.Schema({
  item: String,
  description: String,
  price: Number,
});

const Menu = mongoose.model('Menu', menuSchema);

app.use(cors());
app.use(express.json());

app.get('/api/order', async (req, res) => {
  try {
    const orders = await Order.find({});
    res.json(orders);
    console.log('Orders fetched from the database:', orders);
  } catch (error) {
    console.error('Error fetching orders:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

app.post('/api/order', async (req, res) => {
  try {
    const { items, totalPrice } = req.body;
    const newOrder = new Order({ items, totalPrice });
    await newOrder.save();
    console.log('Order placed:', newOrder);
    res.status(201).json(newOrder);
  } catch (error) {
    console.error('Error placing order:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

app.get('/api/menu', async (req, res) => {
  try {
    const menuItems = await Menu.find({});
    res.json(menuItems);
    console.log('Menu items fetched from the database:', menuItems);
  } catch (error) {
    console.error('Error fetching menu items:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
